#include <avr/io.h>
#include <util/delay.h>

#include "extram.hpp"
#include "usart.hpp"

int main(void) {
    // initialize usart
    setup_usart();

    // initialize shifting register
    setup_extram();

    // 256 random addresses spread over the whole external RAM
    uint16_t addrs[] = {5901, 1437, 1259, 5845, 2816, 2133, 5409, 3673, 7191, 6655, 2580, 127, 3667, 5505, 57, 2309, 6700, 5712, 2099, 2564, 2442, 3047, 4112, 5148, 5402, 4477, 2551, 5027, 4431, 5697, 8124, 5880, 2708, 460, 6683, 1702, 5147, 998, 1361, 3657, 3241, 88, 1811, 1539, 896, 7046, 1724, 44, 7579, 1464, 4688, 2250, 4818, 3165, 1440, 6232, 2496, 4651, 4271, 2211, 7039, 3102, 4158, 3054, 5361, 2499, 3897, 5914, 6402, 4936, 2312, 6415, 2277, 583, 2391, 2620, 1610, 4268, 2005, 4584, 6419, 5437, 6457, 7814, 852, 1944, 6516, 7135, 5347, 8030, 6869, 7001, 2848, 7370, 6834, 7413, 80, 1306, 1067, 7606, 7685, 268, 6101, 5648, 4825, 471, 6, 1082, 1982, 2422, 6723, 2764, 1343, 4272, 5085, 6046, 1250, 4235, 7621, 3797, 7901, 2332, 2376, 2080, 2954, 4375, 2042, 6467, 7968, 2798, 632, 6918, 4295, 427, 380, 2223, 7282, 1509, 8064, 6325, 1339, 3996, 2377, 6026, 863, 6229, 8027, 107, 2563, 3315, 5842, 1110, 3233, 5933, 3698, 645, 7882, 3191, 7465, 4499, 4378, 6493, 1584, 7140, 6277, 5593, 2350, 5536, 4836, 3767, 4010, 4186, 5953, 1206, 7026, 7765, 6930, 5624, 2027, 4168, 1322, 165, 3360, 5128, 6562, 7399, 2923, 351, 3880, 3763, 6731, 5839, 3593, 7184, 3134, 6774, 7537, 7094, 4620, 7766, 862, 4923, 7131, 1744, 7682, 1283, 7149, 3625, 378, 1280, 5556, 1399, 450, 7558, 5362, 4874, 967, 6254, 6859, 592, 4073, 819, 5215, 3564, 4922, 8147, 1825, 6038, 4633, 1560, 7690, 498, 2996, 4854, 7538, 7993, 2645, 66, 3746, 1027, 5960, 4253, 5212, 7656, 1187, 3378, 5703, 5813, 581, 5444, 7885, 1375, 6806, 6672, 1368, 4191};

    // write SRAM
    serprint("WRITING...\n\r");
    uint8_t val = 0;
    for (uint16_t i = 0; i < 256; i++) {
        // write
        extram_write(addrs[i], val);

        // next value
        val++;
    }
    serprint("WRITING FINISHED!\n\r\n\r");

    // read SRAM again
    serprint("READING...\n\r");
    val = 0;
    for (uint16_t i = 0; i < 256; i++) {
        // read
        uint8_t read = extram_read(addrs[i]);

        // compare
        if (read != val) {
            serprint("ERROR IN STEP ");
            serprintuint8(val);
            serprint("!\n\r");
        }

        // next value
        val++;
    }
    serprint("READING FINISHED!\n\r");

    // endless loop
    while (1) {
    };
}
